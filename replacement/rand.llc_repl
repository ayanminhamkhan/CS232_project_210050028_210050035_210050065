#include "cache.h"
#include<time.h>

// initialize replacement state
void CACHE::llc_initialize_replacement()
{

}

uint32_t CACHE::rand_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type){
    uint32_t way = 0;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " rand: " << block[set][way].lru << endl; });

            return way;
        }
    }

    srand(time(0));
    way=rand()%NUM_WAY;
    return way;
    

    // if (way == NUM_WAY) {
    //     cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
    //     assert(0);
    // }

    
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    return rand_victim(cpu, instr_id, set, current_set, ip, full_addr, type); 
}

void CACHE::rand_update(uint32_t set, uint32_t way)
{
   return;
}
    

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    
    return;
}

void CACHE::llc_replacement_final_stats()
{

}
